// source: helloworld.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.helloworld.BridgeMsg', null, global);
goog.exportSymbol('proto.helloworld.BurnCompleted', null, global);
goog.exportSymbol('proto.helloworld.BurnRequest', null, global);
goog.exportSymbol('proto.helloworld.HelloReply', null, global);
goog.exportSymbol('proto.helloworld.OracleRequest', null, global);
goog.exportSymbol('proto.helloworld.PortalSynthesysMsg', null, global);
goog.exportSymbol('proto.helloworld.ReceiveRequest', null, global);
goog.exportSymbol('proto.helloworld.Request', null, global);
goog.exportSymbol('proto.helloworld.RevertBurnCompleted', null, global);
goog.exportSymbol('proto.helloworld.RevertBurnRequest', null, global);
goog.exportSymbol('proto.helloworld.RevertSynthesizeCompleted', null, global);
goog.exportSymbol('proto.helloworld.RevertSynthesizeRequest', null, global);
goog.exportSymbol('proto.helloworld.SynthesisMsg', null, global);
goog.exportSymbol('proto.helloworld.SynthesizeCompleted', null, global);
goog.exportSymbol('proto.helloworld.SynthesizeRequest', null, global);
goog.exportSymbol('proto.helloworld.uinteger160', null, global);
goog.exportSymbol('proto.helloworld.uinteger256', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.Request.displayName = 'proto.helloworld.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.HelloReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.HelloReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.HelloReply.displayName = 'proto.helloworld.HelloReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.uinteger256 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.uinteger256, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.uinteger256.displayName = 'proto.helloworld.uinteger256';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.uinteger160 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.uinteger160, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.uinteger160.displayName = 'proto.helloworld.uinteger160';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.BurnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.BurnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.BurnRequest.displayName = 'proto.helloworld.BurnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.SynthesizeCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.SynthesizeCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.SynthesizeCompleted.displayName = 'proto.helloworld.SynthesizeCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.RevertBurnCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.RevertBurnCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.RevertBurnCompleted.displayName = 'proto.helloworld.RevertBurnCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.RevertBurnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.RevertBurnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.RevertBurnRequest.displayName = 'proto.helloworld.RevertBurnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.RevertSynthesizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.RevertSynthesizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.RevertSynthesizeRequest.displayName = 'proto.helloworld.RevertSynthesizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.SynthesisMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.SynthesisMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.SynthesisMsg.displayName = 'proto.helloworld.SynthesisMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.SynthesizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.SynthesizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.SynthesizeRequest.displayName = 'proto.helloworld.SynthesizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.BurnCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.BurnCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.BurnCompleted.displayName = 'proto.helloworld.BurnCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.RevertSynthesizeCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.RevertSynthesizeCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.RevertSynthesizeCompleted.displayName = 'proto.helloworld.RevertSynthesizeCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.PortalSynthesysMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.PortalSynthesysMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.PortalSynthesysMsg.displayName = 'proto.helloworld.PortalSynthesysMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.OracleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.OracleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.OracleRequest.displayName = 'proto.helloworld.OracleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.ReceiveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.ReceiveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.ReceiveRequest.displayName = 'proto.helloworld.ReceiveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.helloworld.BridgeMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.helloworld.BridgeMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.helloworld.BridgeMsg.displayName = 'proto.helloworld.BridgeMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.Request}
 */
proto.helloworld.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.Request;
  return proto.helloworld.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.Request}
 */
proto.helloworld.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.helloworld.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.Request} returns this
 */
proto.helloworld.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.HelloReply.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.HelloReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.HelloReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.HelloReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.HelloReply}
 */
proto.helloworld.HelloReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.HelloReply;
  return proto.helloworld.HelloReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.HelloReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.HelloReply}
 */
proto.helloworld.HelloReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.HelloReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.HelloReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.HelloReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.HelloReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.helloworld.HelloReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.HelloReply} returns this
 */
proto.helloworld.HelloReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.uinteger256.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.uinteger256.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.uinteger256} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.uinteger256.toObject = function(includeInstance, msg) {
  var f, obj = {
    id0: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id1: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id2: jspb.Message.getFieldWithDefault(msg, 3, 0),
    id3: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.uinteger256}
 */
proto.helloworld.uinteger256.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.uinteger256;
  return proto.helloworld.uinteger256.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.uinteger256} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.uinteger256}
 */
proto.helloworld.uinteger256.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.uinteger256.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.uinteger256.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.uinteger256} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.uinteger256.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId0();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getId1();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getId2();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getId3();
  if (f !== 0) {
    writer.writeFixed64(
      4,
      f
    );
  }
};


/**
 * optional fixed64 id_0 = 1;
 * @return {number}
 */
proto.helloworld.uinteger256.prototype.getId0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger256} returns this
 */
proto.helloworld.uinteger256.prototype.setId0 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 id_1 = 2;
 * @return {number}
 */
proto.helloworld.uinteger256.prototype.getId1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger256} returns this
 */
proto.helloworld.uinteger256.prototype.setId1 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed64 id_2 = 3;
 * @return {number}
 */
proto.helloworld.uinteger256.prototype.getId2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger256} returns this
 */
proto.helloworld.uinteger256.prototype.setId2 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed64 id_3 = 4;
 * @return {number}
 */
proto.helloworld.uinteger256.prototype.getId3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger256} returns this
 */
proto.helloworld.uinteger256.prototype.setId3 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.uinteger160.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.uinteger160.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.uinteger160} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.uinteger160.toObject = function(includeInstance, msg) {
  var f, obj = {
    id0: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id1: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id2: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.uinteger160}
 */
proto.helloworld.uinteger160.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.uinteger160;
  return proto.helloworld.uinteger160.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.uinteger160} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.uinteger160}
 */
proto.helloworld.uinteger160.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setId1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setId2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.uinteger160.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.uinteger160.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.uinteger160} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.uinteger160.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId0();
  if (f !== 0) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = message.getId1();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getId2();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional fixed64 id_0 = 1;
 * @return {number}
 */
proto.helloworld.uinteger160.prototype.getId0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger160} returns this
 */
proto.helloworld.uinteger160.prototype.setId0 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 id_1 = 2;
 * @return {number}
 */
proto.helloworld.uinteger160.prototype.getId1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger160} returns this
 */
proto.helloworld.uinteger160.prototype.setId1 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 id_2 = 3;
 * @return {number}
 */
proto.helloworld.uinteger160.prototype.getId2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.uinteger160} returns this
 */
proto.helloworld.uinteger160.prototype.setId2 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.BurnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.BurnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.BurnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BurnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    token: (f = msg.getToken()) && proto.helloworld.uinteger160.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.BurnRequest}
 */
proto.helloworld.BurnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.BurnRequest;
  return proto.helloworld.BurnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.BurnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.BurnRequest}
 */
proto.helloworld.BurnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 5:
      var value = new proto.helloworld.uinteger160;
      reader.readMessage(value,proto.helloworld.uinteger160.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.BurnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.BurnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.BurnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BurnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      4,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.helloworld.uinteger160.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.BurnRequest.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.BurnRequest} returns this
*/
proto.helloworld.BurnRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnRequest} returns this
 */
proto.helloworld.BurnRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 from = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.BurnRequest.prototype.getFrom = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.BurnRequest} returns this
*/
proto.helloworld.BurnRequest.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnRequest} returns this
 */
proto.helloworld.BurnRequest.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uinteger256 to = 3;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.BurnRequest.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 3));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.BurnRequest} returns this
*/
proto.helloworld.BurnRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnRequest} returns this
 */
proto.helloworld.BurnRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sfixed64 amount = 4;
 * @return {number}
 */
proto.helloworld.BurnRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.BurnRequest} returns this
 */
proto.helloworld.BurnRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uinteger160 token = 5;
 * @return {?proto.helloworld.uinteger160}
 */
proto.helloworld.BurnRequest.prototype.getToken = function() {
  return /** @type{?proto.helloworld.uinteger160} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger160, 5));
};


/**
 * @param {?proto.helloworld.uinteger160|undefined} value
 * @return {!proto.helloworld.BurnRequest} returns this
*/
proto.helloworld.BurnRequest.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnRequest} returns this
 */
proto.helloworld.BurnRequest.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnRequest.prototype.hasToken = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.SynthesizeCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.SynthesizeCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.SynthesizeCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesizeCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: (f = msg.getToken()) && proto.helloworld.uinteger160.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.SynthesizeCompleted}
 */
proto.helloworld.SynthesizeCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.SynthesizeCompleted;
  return proto.helloworld.SynthesizeCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.SynthesizeCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.SynthesizeCompleted}
 */
proto.helloworld.SynthesizeCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.helloworld.uinteger160;
      reader.readMessage(value,proto.helloworld.uinteger160.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.SynthesizeCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.SynthesizeCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.SynthesizeCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesizeCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.uinteger160.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.SynthesizeCompleted.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
*/
proto.helloworld.SynthesizeCompleted.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
 */
proto.helloworld.SynthesizeCompleted.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeCompleted.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.SynthesizeCompleted.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
*/
proto.helloworld.SynthesizeCompleted.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
 */
proto.helloworld.SynthesizeCompleted.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeCompleted.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 amount = 3;
 * @return {number}
 */
proto.helloworld.SynthesizeCompleted.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
 */
proto.helloworld.SynthesizeCompleted.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uinteger160 token = 4;
 * @return {?proto.helloworld.uinteger160}
 */
proto.helloworld.SynthesizeCompleted.prototype.getToken = function() {
  return /** @type{?proto.helloworld.uinteger160} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger160, 4));
};


/**
 * @param {?proto.helloworld.uinteger160|undefined} value
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
*/
proto.helloworld.SynthesizeCompleted.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeCompleted} returns this
 */
proto.helloworld.SynthesizeCompleted.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeCompleted.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.RevertBurnCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.RevertBurnCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.RevertBurnCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertBurnCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: (f = msg.getToken()) && proto.helloworld.uinteger160.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.RevertBurnCompleted}
 */
proto.helloworld.RevertBurnCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.RevertBurnCompleted;
  return proto.helloworld.RevertBurnCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.RevertBurnCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.RevertBurnCompleted}
 */
proto.helloworld.RevertBurnCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.helloworld.uinteger160;
      reader.readMessage(value,proto.helloworld.uinteger160.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.RevertBurnCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.RevertBurnCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.RevertBurnCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertBurnCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.uinteger160.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertBurnCompleted.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
*/
proto.helloworld.RevertBurnCompleted.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
 */
proto.helloworld.RevertBurnCompleted.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertBurnCompleted.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertBurnCompleted.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
*/
proto.helloworld.RevertBurnCompleted.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
 */
proto.helloworld.RevertBurnCompleted.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertBurnCompleted.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 amount = 3;
 * @return {number}
 */
proto.helloworld.RevertBurnCompleted.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
 */
proto.helloworld.RevertBurnCompleted.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uinteger160 token = 4;
 * @return {?proto.helloworld.uinteger160}
 */
proto.helloworld.RevertBurnCompleted.prototype.getToken = function() {
  return /** @type{?proto.helloworld.uinteger160} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger160, 4));
};


/**
 * @param {?proto.helloworld.uinteger160|undefined} value
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
*/
proto.helloworld.RevertBurnCompleted.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertBurnCompleted} returns this
 */
proto.helloworld.RevertBurnCompleted.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertBurnCompleted.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.RevertBurnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.RevertBurnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.RevertBurnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertBurnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.RevertBurnRequest}
 */
proto.helloworld.RevertBurnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.RevertBurnRequest;
  return proto.helloworld.RevertBurnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.RevertBurnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.RevertBurnRequest}
 */
proto.helloworld.RevertBurnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.RevertBurnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.RevertBurnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.RevertBurnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertBurnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.helloworld.RevertBurnRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.RevertBurnRequest} returns this
 */
proto.helloworld.RevertBurnRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertBurnRequest.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertBurnRequest} returns this
*/
proto.helloworld.RevertBurnRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertBurnRequest} returns this
 */
proto.helloworld.RevertBurnRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertBurnRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.RevertSynthesizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.RevertSynthesizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertSynthesizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.RevertSynthesizeRequest}
 */
proto.helloworld.RevertSynthesizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.RevertSynthesizeRequest;
  return proto.helloworld.RevertSynthesizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.RevertSynthesizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.RevertSynthesizeRequest}
 */
proto.helloworld.RevertSynthesizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.RevertSynthesizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.RevertSynthesizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertSynthesizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertSynthesizeRequest} returns this
*/
proto.helloworld.RevertSynthesizeRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertSynthesizeRequest} returns this
 */
proto.helloworld.RevertSynthesizeRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertSynthesizeRequest} returns this
*/
proto.helloworld.RevertSynthesizeRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertSynthesizeRequest} returns this
 */
proto.helloworld.RevertSynthesizeRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertSynthesizeRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.SynthesisMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.SynthesisMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.SynthesisMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesisMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqburn: (f = msg.getReqburn()) && proto.helloworld.BurnRequest.toObject(includeInstance, f),
    reqrevertburn: (f = msg.getReqrevertburn()) && proto.helloworld.RevertBurnRequest.toObject(includeInstance, f),
    reqrevertsynthesize: (f = msg.getReqrevertsynthesize()) && proto.helloworld.RevertSynthesizeRequest.toObject(includeInstance, f),
    complsynthesize: (f = msg.getComplsynthesize()) && proto.helloworld.SynthesizeCompleted.toObject(includeInstance, f),
    complrevertburn: (f = msg.getComplrevertburn()) && proto.helloworld.RevertBurnCompleted.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.SynthesisMsg}
 */
proto.helloworld.SynthesisMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.SynthesisMsg;
  return proto.helloworld.SynthesisMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.SynthesisMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.SynthesisMsg}
 */
proto.helloworld.SynthesisMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.BurnRequest;
      reader.readMessage(value,proto.helloworld.BurnRequest.deserializeBinaryFromReader);
      msg.setReqburn(value);
      break;
    case 2:
      var value = new proto.helloworld.RevertBurnRequest;
      reader.readMessage(value,proto.helloworld.RevertBurnRequest.deserializeBinaryFromReader);
      msg.setReqrevertburn(value);
      break;
    case 3:
      var value = new proto.helloworld.RevertSynthesizeRequest;
      reader.readMessage(value,proto.helloworld.RevertSynthesizeRequest.deserializeBinaryFromReader);
      msg.setReqrevertsynthesize(value);
      break;
    case 4:
      var value = new proto.helloworld.SynthesizeCompleted;
      reader.readMessage(value,proto.helloworld.SynthesizeCompleted.deserializeBinaryFromReader);
      msg.setComplsynthesize(value);
      break;
    case 5:
      var value = new proto.helloworld.RevertBurnCompleted;
      reader.readMessage(value,proto.helloworld.RevertBurnCompleted.deserializeBinaryFromReader);
      msg.setComplrevertburn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.SynthesisMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.SynthesisMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.SynthesisMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesisMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqburn();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.BurnRequest.serializeBinaryToWriter
    );
  }
  f = message.getReqrevertburn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.RevertBurnRequest.serializeBinaryToWriter
    );
  }
  f = message.getReqrevertsynthesize();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.RevertSynthesizeRequest.serializeBinaryToWriter
    );
  }
  f = message.getComplsynthesize();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.SynthesizeCompleted.serializeBinaryToWriter
    );
  }
  f = message.getComplrevertburn();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.helloworld.RevertBurnCompleted.serializeBinaryToWriter
    );
  }
};


/**
 * optional BurnRequest reqBurn = 1;
 * @return {?proto.helloworld.BurnRequest}
 */
proto.helloworld.SynthesisMsg.prototype.getReqburn = function() {
  return /** @type{?proto.helloworld.BurnRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.BurnRequest, 1));
};


/**
 * @param {?proto.helloworld.BurnRequest|undefined} value
 * @return {!proto.helloworld.SynthesisMsg} returns this
*/
proto.helloworld.SynthesisMsg.prototype.setReqburn = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesisMsg} returns this
 */
proto.helloworld.SynthesisMsg.prototype.clearReqburn = function() {
  return this.setReqburn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesisMsg.prototype.hasReqburn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RevertBurnRequest reqRevertBurn = 2;
 * @return {?proto.helloworld.RevertBurnRequest}
 */
proto.helloworld.SynthesisMsg.prototype.getReqrevertburn = function() {
  return /** @type{?proto.helloworld.RevertBurnRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.RevertBurnRequest, 2));
};


/**
 * @param {?proto.helloworld.RevertBurnRequest|undefined} value
 * @return {!proto.helloworld.SynthesisMsg} returns this
*/
proto.helloworld.SynthesisMsg.prototype.setReqrevertburn = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesisMsg} returns this
 */
proto.helloworld.SynthesisMsg.prototype.clearReqrevertburn = function() {
  return this.setReqrevertburn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesisMsg.prototype.hasReqrevertburn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RevertSynthesizeRequest reqRevertSynthesize = 3;
 * @return {?proto.helloworld.RevertSynthesizeRequest}
 */
proto.helloworld.SynthesisMsg.prototype.getReqrevertsynthesize = function() {
  return /** @type{?proto.helloworld.RevertSynthesizeRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.RevertSynthesizeRequest, 3));
};


/**
 * @param {?proto.helloworld.RevertSynthesizeRequest|undefined} value
 * @return {!proto.helloworld.SynthesisMsg} returns this
*/
proto.helloworld.SynthesisMsg.prototype.setReqrevertsynthesize = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesisMsg} returns this
 */
proto.helloworld.SynthesisMsg.prototype.clearReqrevertsynthesize = function() {
  return this.setReqrevertsynthesize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesisMsg.prototype.hasReqrevertsynthesize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SynthesizeCompleted complSynthesize = 4;
 * @return {?proto.helloworld.SynthesizeCompleted}
 */
proto.helloworld.SynthesisMsg.prototype.getComplsynthesize = function() {
  return /** @type{?proto.helloworld.SynthesizeCompleted} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.SynthesizeCompleted, 4));
};


/**
 * @param {?proto.helloworld.SynthesizeCompleted|undefined} value
 * @return {!proto.helloworld.SynthesisMsg} returns this
*/
proto.helloworld.SynthesisMsg.prototype.setComplsynthesize = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesisMsg} returns this
 */
proto.helloworld.SynthesisMsg.prototype.clearComplsynthesize = function() {
  return this.setComplsynthesize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesisMsg.prototype.hasComplsynthesize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RevertBurnCompleted complRevertBurn = 5;
 * @return {?proto.helloworld.RevertBurnCompleted}
 */
proto.helloworld.SynthesisMsg.prototype.getComplrevertburn = function() {
  return /** @type{?proto.helloworld.RevertBurnCompleted} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.RevertBurnCompleted, 5));
};


/**
 * @param {?proto.helloworld.RevertBurnCompleted|undefined} value
 * @return {!proto.helloworld.SynthesisMsg} returns this
*/
proto.helloworld.SynthesisMsg.prototype.setComplrevertburn = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesisMsg} returns this
 */
proto.helloworld.SynthesisMsg.prototype.clearComplrevertburn = function() {
  return this.setComplrevertburn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesisMsg.prototype.hasComplrevertburn = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.SynthesizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.SynthesizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.SynthesizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger160.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    realToken: (f = msg.getRealToken()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.SynthesizeRequest}
 */
proto.helloworld.SynthesizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.SynthesizeRequest;
  return proto.helloworld.SynthesizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.SynthesizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.SynthesizeRequest}
 */
proto.helloworld.SynthesizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 3:
      var value = new proto.helloworld.uinteger160;
      reader.readMessage(value,proto.helloworld.uinteger160.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 5:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setRealToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.SynthesizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.SynthesizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.SynthesizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.SynthesizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.uinteger160.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      4,
      f
    );
  }
  f = message.getRealToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.SynthesizeRequest.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.SynthesizeRequest} returns this
*/
proto.helloworld.SynthesizeRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeRequest} returns this
 */
proto.helloworld.SynthesizeRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 from = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.SynthesizeRequest.prototype.getFrom = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.SynthesizeRequest} returns this
*/
proto.helloworld.SynthesizeRequest.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeRequest} returns this
 */
proto.helloworld.SynthesizeRequest.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uinteger160 to = 3;
 * @return {?proto.helloworld.uinteger160}
 */
proto.helloworld.SynthesizeRequest.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger160} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger160, 3));
};


/**
 * @param {?proto.helloworld.uinteger160|undefined} value
 * @return {!proto.helloworld.SynthesizeRequest} returns this
*/
proto.helloworld.SynthesizeRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeRequest} returns this
 */
proto.helloworld.SynthesizeRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sfixed64 amount = 4;
 * @return {number}
 */
proto.helloworld.SynthesizeRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.SynthesizeRequest} returns this
 */
proto.helloworld.SynthesizeRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uinteger256 real_token = 5;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.SynthesizeRequest.prototype.getRealToken = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 5));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.SynthesizeRequest} returns this
*/
proto.helloworld.SynthesizeRequest.prototype.setRealToken = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.SynthesizeRequest} returns this
 */
proto.helloworld.SynthesizeRequest.prototype.clearRealToken = function() {
  return this.setRealToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.SynthesizeRequest.prototype.hasRealToken = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.BurnCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.BurnCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.BurnCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BurnCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: (f = msg.getToken()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.BurnCompleted}
 */
proto.helloworld.BurnCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.BurnCompleted;
  return proto.helloworld.BurnCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.BurnCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.BurnCompleted}
 */
proto.helloworld.BurnCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.BurnCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.BurnCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.BurnCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BurnCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.helloworld.BurnCompleted.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.BurnCompleted} returns this
 */
proto.helloworld.BurnCompleted.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.BurnCompleted.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.BurnCompleted} returns this
*/
proto.helloworld.BurnCompleted.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnCompleted} returns this
 */
proto.helloworld.BurnCompleted.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnCompleted.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 amount = 3;
 * @return {number}
 */
proto.helloworld.BurnCompleted.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.BurnCompleted} returns this
 */
proto.helloworld.BurnCompleted.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uinteger256 token = 4;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.BurnCompleted.prototype.getToken = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 4));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.BurnCompleted} returns this
*/
proto.helloworld.BurnCompleted.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BurnCompleted} returns this
 */
proto.helloworld.BurnCompleted.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BurnCompleted.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.RevertSynthesizeCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.RevertSynthesizeCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertSynthesizeCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    token: (f = msg.getToken()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.RevertSynthesizeCompleted}
 */
proto.helloworld.RevertSynthesizeCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.RevertSynthesizeCompleted;
  return proto.helloworld.RevertSynthesizeCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.RevertSynthesizeCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.RevertSynthesizeCompleted}
 */
proto.helloworld.RevertSynthesizeCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.RevertSynthesizeCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.RevertSynthesizeCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.RevertSynthesizeCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.getId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
*/
proto.helloworld.RevertSynthesizeCompleted.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 to = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.getTo = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
*/
proto.helloworld.RevertSynthesizeCompleted.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 amount = 3;
 * @return {number}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uinteger256 token = 4;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.getToken = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 4));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
*/
proto.helloworld.RevertSynthesizeCompleted.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.RevertSynthesizeCompleted} returns this
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.RevertSynthesizeCompleted.prototype.hasToken = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.PortalSynthesysMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.PortalSynthesysMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.PortalSynthesysMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.PortalSynthesysMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqsyntesize: (f = msg.getReqsyntesize()) && proto.helloworld.SynthesizeRequest.toObject(includeInstance, f),
    reqrevertburn: (f = msg.getReqrevertburn()) && proto.helloworld.RevertBurnRequest.toObject(includeInstance, f),
    complburn: (f = msg.getComplburn()) && proto.helloworld.BurnCompleted.toObject(includeInstance, f),
    complrevertsynthesize: (f = msg.getComplrevertsynthesize()) && proto.helloworld.RevertSynthesizeCompleted.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.PortalSynthesysMsg}
 */
proto.helloworld.PortalSynthesysMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.PortalSynthesysMsg;
  return proto.helloworld.PortalSynthesysMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.PortalSynthesysMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.PortalSynthesysMsg}
 */
proto.helloworld.PortalSynthesysMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.SynthesizeRequest;
      reader.readMessage(value,proto.helloworld.SynthesizeRequest.deserializeBinaryFromReader);
      msg.setReqsyntesize(value);
      break;
    case 2:
      var value = new proto.helloworld.RevertBurnRequest;
      reader.readMessage(value,proto.helloworld.RevertBurnRequest.deserializeBinaryFromReader);
      msg.setReqrevertburn(value);
      break;
    case 3:
      var value = new proto.helloworld.BurnCompleted;
      reader.readMessage(value,proto.helloworld.BurnCompleted.deserializeBinaryFromReader);
      msg.setComplburn(value);
      break;
    case 4:
      var value = new proto.helloworld.RevertSynthesizeCompleted;
      reader.readMessage(value,proto.helloworld.RevertSynthesizeCompleted.deserializeBinaryFromReader);
      msg.setComplrevertsynthesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.PortalSynthesysMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.PortalSynthesysMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.PortalSynthesysMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.PortalSynthesysMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqsyntesize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.SynthesizeRequest.serializeBinaryToWriter
    );
  }
  f = message.getReqrevertburn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.RevertBurnRequest.serializeBinaryToWriter
    );
  }
  f = message.getComplburn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.BurnCompleted.serializeBinaryToWriter
    );
  }
  f = message.getComplrevertsynthesize();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.helloworld.RevertSynthesizeCompleted.serializeBinaryToWriter
    );
  }
};


/**
 * optional SynthesizeRequest reqSyntesize = 1;
 * @return {?proto.helloworld.SynthesizeRequest}
 */
proto.helloworld.PortalSynthesysMsg.prototype.getReqsyntesize = function() {
  return /** @type{?proto.helloworld.SynthesizeRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.SynthesizeRequest, 1));
};


/**
 * @param {?proto.helloworld.SynthesizeRequest|undefined} value
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
*/
proto.helloworld.PortalSynthesysMsg.prototype.setReqsyntesize = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
 */
proto.helloworld.PortalSynthesysMsg.prototype.clearReqsyntesize = function() {
  return this.setReqsyntesize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.PortalSynthesysMsg.prototype.hasReqsyntesize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RevertBurnRequest reqRevertBurn = 2;
 * @return {?proto.helloworld.RevertBurnRequest}
 */
proto.helloworld.PortalSynthesysMsg.prototype.getReqrevertburn = function() {
  return /** @type{?proto.helloworld.RevertBurnRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.RevertBurnRequest, 2));
};


/**
 * @param {?proto.helloworld.RevertBurnRequest|undefined} value
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
*/
proto.helloworld.PortalSynthesysMsg.prototype.setReqrevertburn = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
 */
proto.helloworld.PortalSynthesysMsg.prototype.clearReqrevertburn = function() {
  return this.setReqrevertburn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.PortalSynthesysMsg.prototype.hasReqrevertburn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BurnCompleted complBurn = 3;
 * @return {?proto.helloworld.BurnCompleted}
 */
proto.helloworld.PortalSynthesysMsg.prototype.getComplburn = function() {
  return /** @type{?proto.helloworld.BurnCompleted} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.BurnCompleted, 3));
};


/**
 * @param {?proto.helloworld.BurnCompleted|undefined} value
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
*/
proto.helloworld.PortalSynthesysMsg.prototype.setComplburn = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
 */
proto.helloworld.PortalSynthesysMsg.prototype.clearComplburn = function() {
  return this.setComplburn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.PortalSynthesysMsg.prototype.hasComplburn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RevertSynthesizeCompleted complRevertSynthesize = 4;
 * @return {?proto.helloworld.RevertSynthesizeCompleted}
 */
proto.helloworld.PortalSynthesysMsg.prototype.getComplrevertsynthesize = function() {
  return /** @type{?proto.helloworld.RevertSynthesizeCompleted} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.RevertSynthesizeCompleted, 4));
};


/**
 * @param {?proto.helloworld.RevertSynthesizeCompleted|undefined} value
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
*/
proto.helloworld.PortalSynthesysMsg.prototype.setComplrevertsynthesize = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.PortalSynthesysMsg} returns this
 */
proto.helloworld.PortalSynthesysMsg.prototype.clearComplrevertsynthesize = function() {
  return this.setComplrevertsynthesize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.PortalSynthesysMsg.prototype.hasComplrevertsynthesize = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.OracleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.OracleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.OracleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.OracleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bridge: (f = msg.getBridge()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    requestId: (f = msg.getRequestId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    selector: (f = msg.getSelector()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    receiveSide: jspb.Message.getFieldWithDefault(msg, 5, ""),
    oppositeBridge: jspb.Message.getFieldWithDefault(msg, 6, ""),
    chainid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.OracleRequest}
 */
proto.helloworld.OracleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.OracleRequest;
  return proto.helloworld.OracleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.OracleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.OracleRequest}
 */
proto.helloworld.OracleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestType(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setBridge(value);
      break;
    case 3:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveSide(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOppositeBridge(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setChainid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.OracleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.OracleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.OracleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.OracleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBridge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getReceiveSide();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOppositeBridge();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChainid();
  if (f !== 0) {
    writer.writeSfixed64(
      7,
      f
    );
  }
};


/**
 * optional string request_type = 1;
 * @return {string}
 */
proto.helloworld.OracleRequest.prototype.getRequestType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uinteger256 bridge = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.OracleRequest.prototype.getBridge = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.OracleRequest} returns this
*/
proto.helloworld.OracleRequest.prototype.setBridge = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.clearBridge = function() {
  return this.setBridge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.OracleRequest.prototype.hasBridge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uinteger256 request_id = 3;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.OracleRequest.prototype.getRequestId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 3));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.OracleRequest} returns this
*/
proto.helloworld.OracleRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.clearRequestId = function() {
  return this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.OracleRequest.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Any selector = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.helloworld.OracleRequest.prototype.getSelector = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.helloworld.OracleRequest} returns this
*/
proto.helloworld.OracleRequest.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.OracleRequest.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string receive_side = 5;
 * @return {string}
 */
proto.helloworld.OracleRequest.prototype.getReceiveSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.setReceiveSide = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string opposite_bridge = 6;
 * @return {string}
 */
proto.helloworld.OracleRequest.prototype.getOppositeBridge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.setOppositeBridge = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional sfixed64 chainid = 7;
 * @return {number}
 */
proto.helloworld.OracleRequest.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.helloworld.OracleRequest} returns this
 */
proto.helloworld.OracleRequest.prototype.setChainid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.ReceiveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.ReceiveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.ReceiveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.ReceiveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqId: (f = msg.getReqId()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    receiveSide: (f = msg.getReceiveSide()) && proto.helloworld.uinteger256.toObject(includeInstance, f),
    txId: (f = msg.getTxId()) && proto.helloworld.uinteger256.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.ReceiveRequest}
 */
proto.helloworld.ReceiveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.ReceiveRequest;
  return proto.helloworld.ReceiveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.ReceiveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.ReceiveRequest}
 */
proto.helloworld.ReceiveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setReqId(value);
      break;
    case 2:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setReceiveSide(value);
      break;
    case 3:
      var value = new proto.helloworld.uinteger256;
      reader.readMessage(value,proto.helloworld.uinteger256.deserializeBinaryFromReader);
      msg.setTxId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.ReceiveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.ReceiveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.ReceiveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.ReceiveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getReceiveSide();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
  f = message.getTxId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.helloworld.uinteger256.serializeBinaryToWriter
    );
  }
};


/**
 * optional uinteger256 req_id = 1;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.ReceiveRequest.prototype.getReqId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 1));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.ReceiveRequest} returns this
*/
proto.helloworld.ReceiveRequest.prototype.setReqId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.ReceiveRequest} returns this
 */
proto.helloworld.ReceiveRequest.prototype.clearReqId = function() {
  return this.setReqId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.ReceiveRequest.prototype.hasReqId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uinteger256 receive_side = 2;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.ReceiveRequest.prototype.getReceiveSide = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 2));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.ReceiveRequest} returns this
*/
proto.helloworld.ReceiveRequest.prototype.setReceiveSide = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.ReceiveRequest} returns this
 */
proto.helloworld.ReceiveRequest.prototype.clearReceiveSide = function() {
  return this.setReceiveSide(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.ReceiveRequest.prototype.hasReceiveSide = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uinteger256 tx_id = 3;
 * @return {?proto.helloworld.uinteger256}
 */
proto.helloworld.ReceiveRequest.prototype.getTxId = function() {
  return /** @type{?proto.helloworld.uinteger256} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.uinteger256, 3));
};


/**
 * @param {?proto.helloworld.uinteger256|undefined} value
 * @return {!proto.helloworld.ReceiveRequest} returns this
*/
proto.helloworld.ReceiveRequest.prototype.setTxId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.ReceiveRequest} returns this
 */
proto.helloworld.ReceiveRequest.prototype.clearTxId = function() {
  return this.setTxId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.ReceiveRequest.prototype.hasTxId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.helloworld.BridgeMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.helloworld.BridgeMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.helloworld.BridgeMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BridgeMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqoracle: (f = msg.getReqoracle()) && proto.helloworld.OracleRequest.toObject(includeInstance, f),
    reqreceive: (f = msg.getReqreceive()) && proto.helloworld.ReceiveRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.helloworld.BridgeMsg}
 */
proto.helloworld.BridgeMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.helloworld.BridgeMsg;
  return proto.helloworld.BridgeMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.helloworld.BridgeMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.helloworld.BridgeMsg}
 */
proto.helloworld.BridgeMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.helloworld.OracleRequest;
      reader.readMessage(value,proto.helloworld.OracleRequest.deserializeBinaryFromReader);
      msg.setReqoracle(value);
      break;
    case 2:
      var value = new proto.helloworld.ReceiveRequest;
      reader.readMessage(value,proto.helloworld.ReceiveRequest.deserializeBinaryFromReader);
      msg.setReqreceive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.helloworld.BridgeMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.helloworld.BridgeMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.helloworld.BridgeMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.helloworld.BridgeMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqoracle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.helloworld.OracleRequest.serializeBinaryToWriter
    );
  }
  f = message.getReqreceive();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.helloworld.ReceiveRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional OracleRequest reqOracle = 1;
 * @return {?proto.helloworld.OracleRequest}
 */
proto.helloworld.BridgeMsg.prototype.getReqoracle = function() {
  return /** @type{?proto.helloworld.OracleRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.OracleRequest, 1));
};


/**
 * @param {?proto.helloworld.OracleRequest|undefined} value
 * @return {!proto.helloworld.BridgeMsg} returns this
*/
proto.helloworld.BridgeMsg.prototype.setReqoracle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BridgeMsg} returns this
 */
proto.helloworld.BridgeMsg.prototype.clearReqoracle = function() {
  return this.setReqoracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BridgeMsg.prototype.hasReqoracle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReceiveRequest reqReceive = 2;
 * @return {?proto.helloworld.ReceiveRequest}
 */
proto.helloworld.BridgeMsg.prototype.getReqreceive = function() {
  return /** @type{?proto.helloworld.ReceiveRequest} */ (
    jspb.Message.getWrapperField(this, proto.helloworld.ReceiveRequest, 2));
};


/**
 * @param {?proto.helloworld.ReceiveRequest|undefined} value
 * @return {!proto.helloworld.BridgeMsg} returns this
*/
proto.helloworld.BridgeMsg.prototype.setReqreceive = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.helloworld.BridgeMsg} returns this
 */
proto.helloworld.BridgeMsg.prototype.clearReqreceive = function() {
  return this.setReqreceive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.helloworld.BridgeMsg.prototype.hasReqreceive = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.helloworld);
