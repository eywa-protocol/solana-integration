// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeClient interface {
	SubscribeOracleRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Bridge_SubscribeOracleRequestClient, error)
	TestOracleRequest(ctx context.Context, in *OracleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeSlotChange(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Bridge_SubscribeSlotChangeClient, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) SubscribeOracleRequest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Bridge_SubscribeOracleRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bridge_ServiceDesc.Streams[0], "/eywa_solana_grpc.Bridge/subscribeOracleRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeSubscribeOracleRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_SubscribeOracleRequestClient interface {
	Recv() (*OracleRequest, error)
	grpc.ClientStream
}

type bridgeSubscribeOracleRequestClient struct {
	grpc.ClientStream
}

func (x *bridgeSubscribeOracleRequestClient) Recv() (*OracleRequest, error) {
	m := new(OracleRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) TestOracleRequest(ctx context.Context, in *OracleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/eywa_solana_grpc.Bridge/testOracleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SubscribeSlotChange(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Bridge_SubscribeSlotChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bridge_ServiceDesc.Streams[1], "/eywa_solana_grpc.Bridge/subscribeSlotChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeSubscribeSlotChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_SubscribeSlotChangeClient interface {
	Recv() (*SlotInfo, error)
	grpc.ClientStream
}

type bridgeSubscribeSlotChangeClient struct {
	grpc.ClientStream
}

func (x *bridgeSubscribeSlotChangeClient) Recv() (*SlotInfo, error) {
	m := new(SlotInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BridgeServer is the server API for Bridge service.
// All implementations must embed UnimplementedBridgeServer
// for forward compatibility
type BridgeServer interface {
	SubscribeOracleRequest(*empty.Empty, Bridge_SubscribeOracleRequestServer) error
	TestOracleRequest(context.Context, *OracleRequest) (*empty.Empty, error)
	SubscribeSlotChange(*empty.Empty, Bridge_SubscribeSlotChangeServer) error
	mustEmbedUnimplementedBridgeServer()
}

// UnimplementedBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (UnimplementedBridgeServer) SubscribeOracleRequest(*empty.Empty, Bridge_SubscribeOracleRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOracleRequest not implemented")
}
func (UnimplementedBridgeServer) TestOracleRequest(context.Context, *OracleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestOracleRequest not implemented")
}
func (UnimplementedBridgeServer) SubscribeSlotChange(*empty.Empty, Bridge_SubscribeSlotChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSlotChange not implemented")
}
func (UnimplementedBridgeServer) mustEmbedUnimplementedBridgeServer() {}

// UnsafeBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServer will
// result in compilation errors.
type UnsafeBridgeServer interface {
	mustEmbedUnimplementedBridgeServer()
}

func RegisterBridgeServer(s grpc.ServiceRegistrar, srv BridgeServer) {
	s.RegisterService(&Bridge_ServiceDesc, srv)
}

func _Bridge_SubscribeOracleRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).SubscribeOracleRequest(m, &bridgeSubscribeOracleRequestServer{stream})
}

type Bridge_SubscribeOracleRequestServer interface {
	Send(*OracleRequest) error
	grpc.ServerStream
}

type bridgeSubscribeOracleRequestServer struct {
	grpc.ServerStream
}

func (x *bridgeSubscribeOracleRequestServer) Send(m *OracleRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Bridge_TestOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).TestOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eywa_solana_grpc.Bridge/testOracleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).TestOracleRequest(ctx, req.(*OracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SubscribeSlotChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).SubscribeSlotChange(m, &bridgeSubscribeSlotChangeServer{stream})
}

type Bridge_SubscribeSlotChangeServer interface {
	Send(*SlotInfo) error
	grpc.ServerStream
}

type bridgeSubscribeSlotChangeServer struct {
	grpc.ServerStream
}

func (x *bridgeSubscribeSlotChangeServer) Send(m *SlotInfo) error {
	return x.ServerStream.SendMsg(m)
}

// Bridge_ServiceDesc is the grpc.ServiceDesc for Bridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eywa_solana_grpc.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "testOracleRequest",
			Handler:    _Bridge_TestOracleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribeOracleRequest",
			Handler:       _Bridge_SubscribeOracleRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "subscribeSlotChange",
			Handler:       _Bridge_SubscribeSlotChange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eywa_solana.proto",
}
